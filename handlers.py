import logging

from aiogram import Router, types
from aiogram.filters import Command, CommandObject
from contextlib import closing
from aiogram import BaseMiddleware, F, Bot
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, CallbackQuery
from aiogram.utils import markdown
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

from keyboards import build_flowers_kb, NotificationCallback, build_weekdays_kb, days_of_week

router = Router()

flowers = {}
list_of_days = []


class Notification(StatesGroup):
    flower_name = State()
    weekdays = State()


class EditNotificationCallback(CallbackData, prefix="edit"):
    flower_name: str
    action: str


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞
@router.message(Command("cancel"))
@router.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("–û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è %r", current_state)
    await state.clear()
    await message.answer(
        "–û—Ç–º–µ–Ω–µ–Ω–æ."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /flowers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
@router.message(Command("flowers"))
async def handle_flowers(message: types.Message):
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:"
    await message.answer(text=text, reply_markup=build_flowers_kb())



# –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞, –∑–∞–ø—Ä–æ—Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(NotificationCallback.filter(F.action == "add"))
async def handle_add_notification(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Notification.flower_name)
    await call.message.edit_text(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è.\n"
             "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
    )


# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@router.message(Notification.flower_name)
async def handle_add_notification_name(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è",)
        return
    await state.update_data(flower_name=message.text)
    await state.set_state(Notification.weekdays)
    await message.answer(
        f"–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è: {markdown.hbold(message.text)}.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª–∏–≤–∞. –û–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏—Å—å —Å –≤—ã–±–æ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ!'\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        reply_markup=build_weekdays_kb()
    )


# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
async def send_results(call: CallbackQuery, data: dict, days: str):
    text = markdown.text(
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:"
        "",
        markdown.text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: ", markdown.hbold(data["flower_name"])),
        markdown.text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ–ª–∏–≤–∞: {markdown.hbold(days)}"),
        sep='\n',
    )
    await call.message.edit_text(text=text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏. –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å—å–º–∞ —Ç–æ–ø–æ—Ä–Ω–∞, call'—ã —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ list_of_days
# –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∂–º—è–∫–Ω–µ—Ç Ready. –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
@router.callback_query(Notification.weekdays, lambda call: True)
async def handle_days_of_week(call: CallbackQuery, state: FSMContext):
    global list_of_days
    global flowers
    if call.data == "week:ready":
        days = ", ".join(list_of_days)
        weekdays = [days_of_week[x][1] for x in list_of_days]
        list_of_days = []
        data = await state.update_data(weekdays=weekdays)
        # –ó–∞–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ "–±–¥" —Å–ª–æ–≤–∞—Ä—å flowers
        flowers.setdefault(call.from_user.id, {}).setdefault(data["flower_name"], data["weekdays"])

        await send_results(call, data, days)
        await state.clear()
    else:
        clean_data = call.data.split(":")[1]
        list_of_days.append(clean_data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü—Ä–æ–±–µ–≥–∞–µ—Ç –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
@router.callback_query(NotificationCallback.filter(F.action == "edit"))
async def handle_edit_notifications(call: CallbackQuery):
    if flowers[call.from_user.id]:
        builder = InlineKeyboardBuilder()
        for flower in flowers[call.from_user.id].keys():
            builder.button(
                text=flower,
                callback_data=EditNotificationCallback(flower_name=flower, action="edit").pack()
            )
        builder.adjust(1)
        await call.answer()
        await call.message.edit_text(text="–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=builder.as_markup())
    else:
        await call.answer()
        builder = InlineKeyboardBuilder()
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=NotificationCallback(action="add").pack())
        await call.message.edit_text(
            text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ñ–µ–ª–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
            reply_markup=builder.as_markup()
        )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(EditNotificationCallback.filter(F.action == 'edit'))
async def handle_edit_notification(call: CallbackQuery, callback_data: EditNotificationCallback):
    flower_name = callback_data.flower_name
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–£–¥–∞–ª–∏—Ç—å!",
        callback_data=EditNotificationCallback(action="delete", flower_name=flower_name).pack()
    )
    await call.answer()
    await call.message.edit_text(
        text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {flower_name}?",
        reply_markup=builder.as_markup(),
    )


# –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ "–±–¥"
@router.callback_query(EditNotificationCallback.filter(F.action == "delete"))
async def handle_delete_notifications(call: CallbackQuery, callback_data: EditNotificationCallback):
    flower_name = callback_data.flower_name
    global flowers
    del flowers[call.from_user.id][flower_name]
    await call.answer()
    await call.message.edit_text(text="–£–¥–∞–ª–µ–Ω–æ!",)

#    —à–µ–¥—É–ª–µ—Ä –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
# scheduler.add_job(bot.send_message, 'interval', days=int(frequency),
#                   args=[message.from_user.id, f"–ù–∞–ø–æ–º–∏–Ω–∞—é –ø–æ–ª–∏—Ç—å üåßÔ∏è {flower}"])
#
# watering = datetime.now() + timedelta(seconds=int(frequency))
# await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ üíß: {datetime.strftime(watering, '%A %H:%M')}")