from aiogram import Router, types
from aiogram.filters import Command, CommandObject
import psycopg2
from contextlib import closing
from aiogram import BaseMiddleware, F, Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

router = Router()


@router.message(Command("add"))
async def add_flower(message: types.Message, bot: Bot, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É
    try:
        args = command.args.split()
        int(args[-1])
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    except AttributeError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª (–≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ) —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n"
            "–ü—Ä–∏–º–µ—Ä: –ê–ª–æ—ç 3"
        )
        return

    flower, frequency = command.args.split()[:-1], command.args.split()[-1]
    flower = ' '.join(flower)   # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
    flowers[flower] = frequency

    #    —à–µ–¥—É–ª–µ—Ä –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
    # scheduler.add_job(bot.send_message, 'interval', days=int(frequency),
    #                   args=[message.from_user.id, f"–ù–∞–ø–æ–º–∏–Ω–∞—é –ø–æ–ª–∏—Ç—å üåßÔ∏è {flower}"])
    #
    # watering = datetime.now() + timedelta(seconds=int(frequency))
    # await message.answer(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ üíß: {datetime.strftime(watering, '%A %H:%M')}")